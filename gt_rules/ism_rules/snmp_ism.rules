#######################################################################
#
#       Copyright (C) 1997, 1998 Omnibus Transport Technologies Ltd.
#       All Rights Reserved
#
#       RESTRICTED RIGHTS:
#
#       This file may have been supplied under a license.
#       It may be used, disclosed, and/or copied only as permitted
#       under such license agreement.  Any copy must contain the
#       above copyright notice and this restricted rights notice.
#       Use, copying, and/or disclosure of the file is strictly
#       prohibited unless otherwise provided in the license agreement.
#
#
# Ident: $Id: snmp.rules 1.5 2001/05/11 16:29:35 dennis Development $
#
#######################################################################

if(match(@Manager, "MonitorWatch"))
{
	switch(@Summary)
	{
	case "Running ...":
		@Severity = 1
		@AlertGroup = "monitorstat"
		@Type = 2
	case "Going Down ...":
		@Severity = 5
		@AlertGroup = "monitorstat"
		@Type = 1
	default:
	}

	@Summary = @Agent + " monitor on " + @Node + ": " + @Summary
}
else
{
#######################################################################
## The following logic can be used to modify an event based on the
## number of times it's happened in a row.  This segment of the rules
## will only send an event every $interval times it happens:
#
#  $interval = 2
#
#  $temp = real($serviceLevelCounter) / real($interval)
#  $temp1 = real($temp) - int($temp)
#
#  if( match($temp1, "0.000000"))
#  {
#    # Modify the event in some way
#  }
#  else
#  {
#    discard
#  }
#
## The next piece of rulesfile will only send an event if the serviceLevel
## is changing state.  serviceLevel is defined by:
##
##      serviceLevel = 0; then SLA is unknown
##      serviceLevel = 1; then SLA is good
##      serviceLevel = 2; then SLA is marginal
##      serviceLevel = 3; then SLA is failed
#
#  if( match($lastServiceLevel, $serviceLevel))
#  {
#    discard
#  }
#
#######################################################################


	# Get the fully qualified hostname of the machine running the monitor
        if(!exists($monitorDomain))
        {
                if(exists($monitorDNSDomain))
                {
                        $monitorDomain = $monitorDNSDomain
                }
                else if(exists($monitorNISDomain))
                {
                        $monitorDomain = $monitorNISDomain
                }
        }
        $FQHostname = $monitorHost
        if(exists($monitorDomain))
        {
                $FQHostname = $FQHostname + "." + $monitorDomain
        }

	#Setup ObjectServer to update Summary, AlertKey and Poll
	update(@Summary)
	update(@Poll)
	update(@Grade)
	update(@Origin)
	update(@Severity)
	update(@Type)
	update(@SysInt)
        # Get general information
	@Agent = $profile
	@OwnerGID = $profileIdentifier
	@OwnerUID = 65534

#       20060508 Changes by Chris Janes of Abilitec to enable us to vary the Class if these events dependent on profile name
#       @Class = 6250

#       20081119        Changes by Chris Janes of Abilitec TD 5152 & 5153
#       @Class = lookup ($profile,prof_class)
        [@Class, @Subclass, @Environment] = lookup ($profile,prof_class)

#       20081119        End of Change

        if(match(@Class, "6050"))
        {
                @Class = 6250
        }
#       20060508        end of changes


	@Type = 8
	@AlertGroup = $oidGroupName
	@NodeAlias = $host
	@Node = $hostIP
	@Origin = $FQHostname
	@Grade = $totalTime
	@Poll = $pollInterval
#       20050908        Change by Chris Janes of Abilitec
        $ruleset = $ruleset + ' - SNMP Monitor'
#       20050908        End of Change

	if (not exists($message))  {
		$tempSeverity = 5
		@Summary = "No message sent for " + $oidNames
		@Identifier = $FQhostname + $service + $profile + $host + $oidGroupName
	}
	else  {
		switch ($serviceLevel)  {
		        case "0":
		                $slSeverity = 1
		                @Type = 1
		        case "1":
		                $slSeverity = 2
		                @Type = 2
		        case "2":
		                $slSeverity = 3
		                @Type = 1
		        case "3":
		                $slSeverity = 4
		                @Type = 1
		        default:
		}
		include "$OMNIHOME/all_rules/ubsw/ism_rules/netapp_snmp_include.rules"

		# Adjust summary information if we're doing failure retests
		# This section is designed to separate transient errors/clears
		# from real errors/clears if the failureRetest functionality
		# is activated.

		if ((int($failureRetests) > 0) and exists($consecutiveFailures))
		{
		        if (int($lastServiceLevel) > int($serviceLevel))
		        {
		                if (int($lastServiceLevelCounter) > int($failureRetests))
		                {
		                        $tempIdentifier = $tempIdentifier + "Real"
		                        @Summary = "Real Error Cleared: " + @Summary
					@Type = 2
		                	$tempSeverity = 2
		                }
		                else
		                {
		                        $tempIdentifier = $tempIdentifier + "Transient"
		                        @Summary = "Transient Error Cleared: " + @Summary
					@Type = 2
		                	$tempSeverity = 2
		                }
		        }
		        else if (int($consecutiveFailures) <= int($failureRetests))
		        {
		                # Possible transient error
		                $tempIdentifier = $tempIdentifier + "Transient"
		                @Summary = "Transient Error: " + @Summary
		                @Type = 1
		                $tempSeverity = 3
		                if(exists($service_name))
		                {
		                        service($service_name, MARGINAL)
		                }
		        }
		        else if(int($consecutiveFailures) > int($failureRetests))
		        {
		                # Real error
		                $tempIdentifier = $tempIdentifier + "Real"
		                @Summary = "Real Error: " + @Summary
		                @Type = 1
		                $tempSeverity = 5
		        }
		}
		@AlertKey = $tempAlertKey
		@Identifier = $tempIdentifier
	}
        if (int($tempSeverity) > int($slSeverity))  {
                $finalSeverity = $tempSeverity
        }
        else  {
                $finalSeverity = $slSeverity
        }
        @Severity = $finalSeverity

        if (exists($totalTime))  {
                @SysInt = real($totalTime) * 1000
        }
}
